import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { Plus, Eye, ArrowLeft, Search } from 'lucide-react'
import { toast } from 'sonner'
import Card from '../../components/Card'
import Button from '../../components/Button'
import Table from '../../components/Table'
import Modal from '../../components/Modal'
import { Input, Select } from '../../components/Form'
import { useClasses, useCreateClass, useUpdateClass, useDeleteClass, useSubjects } from '../../services/queries'

const AdminClasses = () => {
  const navigate = useNavigate()
  const { data: classes, isLoading } = useClasses()
  const { data: subjects } = useSubjects()
  const createClass = useCreateClass()
  const updateClass = useUpdateClass()
  const deleteClass = useDeleteClass()
  
  const [showModal, setShowModal] = useState(false)
  const [showViewModal, setShowViewModal] = useState(false)
  const [showEditModal, setShowEditModal] = useState(false)
  const [showDeleteModal, setShowDeleteModal] = useState(false)
  const [selectedClass, setSelectedClass] = useState(null)
  const [form, setForm] = useState({
    name: '',
    grade: 6, 
    section: '', 
    academic_year: '2024-2025', 
    capacity: 30
  })

  // Auto-generate class name when grade or section changes
  const generateClassName = (grade, section) => {
    return section ? `Grade ${grade} - ${section}` : `Grade ${grade}`
  }

  // Update form and auto-generate name
  const updateForm = (updates) => {
    const newForm = { ...form, ...updates }
    // Auto-generate name if grade or section changed and name hasn't been manually set
    if (updates.grade !== undefined || updates.section !== undefined) {
      const autoGeneratedName = generateClassName(newForm.grade, newForm.section)
      // Only auto-update if the current name matches the previous auto-generated name or is empty
      const previousAutoName = generateClassName(form.grade, form.section)
      if (newForm.name === '' || newForm.name === previousAutoName) {
        newForm.name = autoGeneratedName
      }
    }
    setForm(newForm)
  }
  const [editForm, setEditForm] = useState(null)

  // Filter states
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedGrade, setSelectedGrade] = useState('')
  const [selectedYear, setSelectedYear] = useState('')
  const [sortBy, setSortBy] = useState('name')

  // Initialize form with auto-generated name
  useEffect(() => {
    setForm(prev => ({
      ...prev,
      name: generateClassName(prev.grade, prev.section)
    }))
  }, [])

  // Filter classes
  const filteredClasses = classes
    ?.filter(cls => {
      const matchesSearch = !searchQuery || 
        cls.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        cls.section?.toLowerCase().includes(searchQuery.toLowerCase())
      const matchesGrade = !selectedGrade || cls.grade?.toString() === selectedGrade
      const matchesYear = !selectedYear || cls.academic_year === selectedYear
      return matchesSearch && matchesGrade && matchesYear
    })
    ?.sort((a, b) => {
      switch (sortBy) {
        case 'name':
          return a.name?.localeCompare(b.name) || 0
        case 'grade':
          return (a.grade || 0) - (b.grade || 0)
        case 'capacity':
          return (a.capacity || 0) - (b.capacity || 0)
        case 'year':
          return (a.academic_year || '').localeCompare(b.academic_year || '')
        default:
          return 0
      }
    }) || []

  // Get unique grades and years for filters
  const availableGrades = [...new Set(classes?.map(cls => cls.grade?.toString()).filter(Boolean))] || []
  const availableYears = [...new Set(classes?.map(cls => cls.academic_year).filter(Boolean))] || []

  // Helper function to get subjects for a class
  const getClassSubjects = (classId) => {
    return subjects?.filter(subject => subject.class_id === classId) || []
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    try {
      const classData = {
        name: form.name,
        grade: form.grade,
        section: form.section,
        academic_year: form.academic_year,
        capacity: form.capacity
      }
      
      await createClass.mutateAsync(classData)
      setShowModal(false)
      setForm({
        name: '',
        grade: 6, section: '', academic_year: '2024-2025', capacity: 30
      })
      toast.success('Class created successfully!')
    } catch (error) {
      console.error('Error creating class:', error)
      toast.error('Failed to create class. Please try again.')
    }
  }

  const handleViewClass = (classData) => {
    setSelectedClass(classData)
    setShowViewModal(true)
  }

  const handleEditClass = (classData) => {
    setEditForm({
      name: classData.name || '',
      grade: classData.grade,
      section: classData.section || '',
      academic_year: classData.academic_year || '2024-2025',
      capacity: classData.capacity
    })
    setSelectedClass(classData)
    setShowEditModal(true)
  }

  const handleDeleteClass = (classData) => {
    setSelectedClass(classData)
    setShowDeleteModal(true)
  }

  const confirmDeleteClass = async () => {
    try {
      await deleteClass.mutateAsync(selectedClass.id)
      setShowDeleteModal(false)
      setSelectedClass(null)
      toast.success('Class deleted successfully!')
    } catch (error) {
      console.error('Error deleting class:', error)
      
      // Show specific error message from backend
      if (error.response?.data?.detail) {
        toast.error(error.response.data.detail)
      } else if (error.message) {
        toast.error(`Failed to delete class: ${error.message}`)
      } else {
        toast.error('Failed to delete class')
      }
    }
  }

  const handleUpdateClass = async (e) => {
    e.preventDefault()
    try {
      const updateData = {
        name: editForm.name,
        grade: parseInt(editForm.grade) || 6,
        section: editForm.section,
        academic_year: editForm.academic_year,
        capacity: parseInt(editForm.capacity) || 30
      }
      
      await updateClass.mutateAsync({ id: selectedClass.id, ...updateData })
      setShowEditModal(false)
      setEditForm(null)
      setSelectedClass(null)
      toast.success('Class updated successfully!')
    } catch (error) {
      console.error('Update class error:', error)
      toast.error('Failed to update class. Please try again.')
    }
  }

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  return (
    <div className="space-y-4 sm:space-y-6">
      {/* Mobile Header */}
      <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-3 sm:space-y-0">
        <div className="flex items-center space-x-3">
          <Button
            variant="outline"
            size="sm"
            onClick={() => navigate('/admin-dashboard')}
            className="hidden lg:block"
          >
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h2 className="text-lg sm:text-xl font-semibold">Classes</h2>
        </div>
        <Button onClick={() => setShowModal(true)} size="sm">
          <Plus className="h-4 w-4 mr-1 sm:mr-2" />
          <span className="hidden sm:inline">Add Class</span>
          <span className="sm:hidden">Add</span>
        </Button>
      </div>

      {/* Filters */}
      <Card className="mb-6">
        <Card.Content className="p-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
            {/* Search */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Search</label>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Search classes..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
            </div>

            {/* Grade Filter */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Grade</label>
              <select
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                value={selectedGrade}
                onChange={(e) => setSelectedGrade(e.target.value)}
              >
                <option value="">All Grades</option>
                {availableGrades.map(grade => (
                  <option key={grade} value={grade}>Grade {grade}</option>
                ))}
              </select>
            </div>

            {/* Academic Year Filter */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Academic Year</label>
              <select
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                value={selectedYear}
                onChange={(e) => setSelectedYear(e.target.value)}
              >
                <option value="">All Years</option>
                {availableYears.map(year => (
                  <option key={year} value={year}>{year}</option>
                ))}
              </select>
            </div>

            {/* Sort By */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Sort By</label>
              <select
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
              >
                <option value="name">Sort by Name</option>
                <option value="grade">Sort by Grade</option>
                <option value="capacity">Sort by Capacity</option>
                <option value="year">Sort by Year</option>
              </select>
            </div>
          </div>
          
          {/* Results Count and Clear Filters */}
          <div className="flex justify-between items-center">
            <div className="text-sm text-gray-600">
              Showing {filteredClasses.length} of {classes?.length || 0} classes
            </div>
            {(searchQuery || selectedGrade || selectedYear || sortBy !== 'name') && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setSearchQuery('')
                  setSelectedGrade('')
                  setSelectedYear('')
                  setSortBy('name')
                }}
              >
                Clear Filters
              </Button>
            )}
          </div>
        </Card.Content>
      </Card>
      
      {/* Mobile Cards / Desktop Table */}
      <div className="block sm:hidden space-y-3">
        {filteredClasses && filteredClasses.length > 0 ? (
          filteredClasses.map((cls) => {
            const classSubjects = getClassSubjects(cls.id)
            return (
            <Card key={cls.id} className="p-4">
              <div className="space-y-2">
                <div className="flex justify-between items-start">
                  <div>
                    <h3 className="font-medium text-gray-900">{cls.name}</h3>
                    <p className="text-sm text-gray-600">Grade {cls.grade} - {cls.section}</p>
                  </div>
                  <div className="flex gap-1">
                    <Button size="sm" variant="outline" onClick={() => handleViewClass(cls)}>
                      <Eye className="h-4 w-4" />
                    </Button>
                    <Button size="sm" variant="outline" onClick={() => handleEditClass(cls)}>
                      Edit
                    </Button>
                    <Button size="sm" variant="outline" onClick={() => handleDeleteClass(cls)}>
                      Delete
                    </Button>
                  </div>
                </div>
                <div className="text-xs text-gray-500 space-y-1">
                  <p>Academic Year: {cls.academic_year || 'N/A'}</p>
                  <p>Capacity: {cls.capacity} students</p>
                  <div>
                    <p className="font-medium">Subjects:</p>
                    <p className="text-xs">
                      {classSubjects.length > 0 
                        ? classSubjects.map(s => s.name).join(', ')
                        : 'No subjects assigned'
                      }
                    </p>
                  </div>
                </div>
              </div>
            </Card>
            )
          })) : (
          <Card className="p-8 text-center">
            <p className="text-gray-500">No classes found matching your filters.</p>
          </Card>
        )}
      </div>

      {/* Desktop Table */}
      <Card className="hidden sm:block">
        <Card.Content className="p-0">
          <div className="overflow-x-auto">
            <Table>
              <Table.Header>
                <Table.Row>
                  <Table.Head>Class Name</Table.Head>
                  <Table.Head>Grade</Table.Head>
                  <Table.Head className="hidden md:table-cell">Section</Table.Head>
                  <Table.Head className="hidden lg:table-cell">Academic Year</Table.Head>
                  <Table.Head>Capacity</Table.Head>
                  <Table.Head className="hidden xl:table-cell">Subjects</Table.Head>
                  <Table.Head>Actions</Table.Head>
                </Table.Row>
              </Table.Header>
              <Table.Body>
                {filteredClasses && filteredClasses.length > 0 ? (
                  filteredClasses.map((cls) => {
                    const classSubjects = getClassSubjects(cls.id)
                    return (
                  <Table.Row key={cls.id}>
                    <Table.Cell>{cls.name}</Table.Cell>
                    <Table.Cell>{cls.grade}</Table.Cell>
                    <Table.Cell className="hidden md:table-cell">{cls.section || 'N/A'}</Table.Cell>
                    <Table.Cell className="hidden lg:table-cell">{cls.academic_year || 'N/A'}</Table.Cell>
                    <Table.Cell>{cls.capacity}</Table.Cell>
                    <Table.Cell className="hidden xl:table-cell">
                      <div className="max-w-xs truncate" title={classSubjects.map(s => s.name).join(', ')}>
                        {classSubjects.length > 0 
                          ? classSubjects.map(s => s.name).join(', ')
                          : 'No subjects'
                        }
                      </div>
                    </Table.Cell>
                    <Table.Cell>
                      <div className="flex gap-1">
                        <Button size="sm" variant="outline" onClick={() => handleViewClass(cls)}>
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Button size="sm" variant="outline" onClick={() => handleEditClass(cls)}>
                          Edit
                        </Button>
                        <Button size="sm" variant="outline" onClick={() => handleDeleteClass(cls)}>
                          Delete
                        </Button>
                      </div>
                    </Table.Cell>
                  </Table.Row>
                    )
                  })) : (
                  <Table.Row>
                    <Table.Cell colSpan={7} className="text-center py-8">
                      <p className="text-gray-500">No classes found matching your filters.</p>
                    </Table.Cell>
                  </Table.Row>
                )}
              </Table.Body>
            </Table>
          </div>
        </Card.Content>
      </Card>

      {/* Modal */}
      <Modal 
        isOpen={showModal} 
        onClose={() => setShowModal(false)}
        title="Add New Class"
        className="sm:max-w-md"
      >
        <form onSubmit={handleSubmit} className="space-y-4">
          <Input
            label="Class Name"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
            placeholder="e.g., Grade 6 - A"
            required
          />
          <Select
            label="Grade"
            value={form.grade}
            onChange={(e) => updateForm({ grade: parseInt(e.target.value) })}
            options={[
              { value: 6, label: 'Grade 6' },
              { value: 7, label: 'Grade 7' },
              { value: 8, label: 'Grade 8' },
              { value: 9, label: 'Grade 9' },
              { value: 10, label: 'Grade 10' },
              { value: 11, label: 'Grade 11' },
              { value: 12, label: 'Grade 12' }
            ]}
            required
          />
          <Input
            label="Section"
            value={form.section}
            onChange={(e) => updateForm({ section: e.target.value })}
            placeholder="e.g., A, B, C (optional)"
          />
          <Select
            label="Academic Year"
            value={form.academic_year}
            onChange={(e) => setForm({ ...form, academic_year: e.target.value })}
            options={[
              { value: '2024-2025', label: '2024-2025' },
              { value: '2025-2026', label: '2025-2026' },
              { value: '2026-2027', label: '2026-2027' },
              { value: '2027-2028', label: '2027-2028' },
              { value: '2028-2029', label: '2028-2029' },
              { value: '2029-2030', label: '2029-2030' }
            ]}
          />
          <Input
            label="Capacity"
            type="number"
            value={form.capacity}
            onChange={(e) => setForm({ ...form, capacity: parseInt(e.target.value) || 30 })}
            required
          />
          <div className="flex flex-col-reverse sm:flex-row justify-end space-y-2 space-y-reverse sm:space-y-0 sm:space-x-3">
            <Button type="button" variant="outline" onClick={() => setShowModal(false)}>
              Cancel
            </Button>
            <Button type="submit" loading={createClass.isPending}>
              Create Class
            </Button>
          </div>
        </form>
      </Modal>

      {/* View Class Modal */}
      <Modal 
        isOpen={showViewModal} 
        onClose={() => setShowViewModal(false)}
        title="Class Details"
        className="sm:max-w-lg"
      >
        {selectedClass ? (
          <div className="space-y-4">
            <div className="space-y-3">
              <div>
                <span className="font-medium text-gray-700">Class Name: </span>
                <span className="text-gray-900">{selectedClass.name}</span>
              </div>
              <div>
                <span className="font-medium text-gray-700">Grade: </span>
                <span className="text-gray-900">{selectedClass.grade}</span>
              </div>
              <div>
                <span className="font-medium text-gray-700">Section: </span>
                <span className="text-gray-900">{selectedClass.section || 'N/A'}</span>
              </div>
              <div>
                <span className="font-medium text-gray-700">Academic Year: </span>
                <span className="text-gray-900">{selectedClass.academic_year || 'N/A'}</span>
              </div>
              <div>
                <span className="font-medium text-gray-700">Capacity: </span>
                <span className="text-gray-900">{selectedClass.capacity} students</span>
              </div>
              <div>
                <span className="font-medium text-gray-700">Subjects: </span>
                <span className="text-gray-900">
                  {getClassSubjects(selectedClass.id).length > 0 
                    ? getClassSubjects(selectedClass.id).map(s => s.name).join(', ')
                    : 'No subjects assigned'
                  }
                </span>
              </div>
            </div>
            <div className="flex justify-end pt-4">
              <button
                onClick={() => setShowViewModal(false)}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
              >
                Close
              </button>
            </div>
          </div>
        ) : (
          <div>Loading...</div>
        )}
      </Modal>

      {/* Edit Class Modal */}
      <Modal 
        isOpen={showEditModal} 
        onClose={() => setShowEditModal(false)}
        title="Edit Class"
        className="sm:max-w-md"
      >
        {editForm && (
          <form onSubmit={handleUpdateClass} className="space-y-4">
            <Input
              label="Class Name"
              value={editForm.name}
              onChange={(e) => setEditForm({ ...editForm, name: e.target.value })}
              placeholder="e.g., Grade 6 - A"
              required
            />
            <Select
              label="Grade"
              value={editForm.grade}
              onChange={(e) => setEditForm({ ...editForm, grade: parseInt(e.target.value) })}
              options={[
                { value: 6, label: 'Grade 6' },
                { value: 7, label: 'Grade 7' },
                { value: 8, label: 'Grade 8' },
                { value: 9, label: 'Grade 9' },
                { value: 10, label: 'Grade 10' },
                { value: 11, label: 'Grade 11' },
                { value: 12, label: 'Grade 12' }
              ]}
              required
            />
            <Input
              label="Section"
              value={editForm.section}
              onChange={(e) => setEditForm({ ...editForm, section: e.target.value })}
              placeholder="e.g., A, B, C (optional)"
            />
            <Select
              label="Academic Year"
              value={editForm.academic_year}
              onChange={(e) => setEditForm({ ...editForm, academic_year: e.target.value })}
              options={[
                { value: '2024-2025', label: '2024-2025' },
                { value: '2025-2026', label: '2025-2026' },
                { value: '2026-2027', label: '2026-2027' },
                { value: '2027-2028', label: '2027-2028' },
                { value: '2028-2029', label: '2028-2029' },
                { value: '2029-2030', label: '2029-2030' }
              ]}
            />
            <Input
              label="Capacity"
              type="number"
              value={editForm.capacity}
              onChange={(e) => setEditForm({ ...editForm, capacity: parseInt(e.target.value) || 30 })}
              required
            />
            <div className="flex flex-col-reverse sm:flex-row justify-end space-y-2 space-y-reverse sm:space-y-0 sm:space-x-3">
              <Button type="button" variant="outline" onClick={() => setShowEditModal(false)}>
                Cancel
              </Button>
              <Button type="submit" loading={updateClass.isPending}>
                Update Class
              </Button>
            </div>
          </form>
        )}
      </Modal>

      {/* Delete Confirmation Modal */}
      <Modal 
        isOpen={showDeleteModal} 
        onClose={() => setShowDeleteModal(false)}
        title="Delete Class"
        className="sm:max-w-md"
      >
        {selectedClass && (
          <div className="space-y-4">
            <p className="text-gray-700">
              Are you sure you want to delete the class <strong>"{selectedClass.name}"</strong>?
            </p>
            <p className="text-sm text-red-600">
              This action cannot be undone. All associated data will be permanently removed.
            </p>
            <div className="flex flex-col-reverse sm:flex-row justify-end space-y-2 space-y-reverse sm:space-y-0 sm:space-x-3">
              <Button type="button" variant="outline" onClick={() => setShowDeleteModal(false)}>
                Cancel
              </Button>
              <Button 
                onClick={confirmDeleteClass}
                className="bg-red-600 hover:bg-red-700 text-white"
              >
                Delete Class
              </Button>
            </div>
          </div>
        )}
      </Modal>
    </div>
  )
}

export default AdminClasses